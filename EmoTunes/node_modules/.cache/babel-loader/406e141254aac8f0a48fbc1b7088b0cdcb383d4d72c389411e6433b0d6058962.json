{"ast":null,"code":"var _jsxFileName = \"D:\\\\work_station\\\\software project\\\\react_website\\\\emotion-music\\\\src\\\\components\\\\Predictions.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Predictions(props) {\n  _s();\n  const [Data, setData] = useState([]);\n  const [Loading, setLoading] = useState(true);\n  const [error, seterror] = useState(null);\n  useEffect(() => {\n    if (props.imageData) {\n      data_fetch();\n    }\n  }, [props.imageData]);\n  const data_fetch = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/reccomend/${props.mood}`, {\n        // mode: 'no-cors',\n        method: 'GET'\n      });\n      console.log(response);\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json();\n      setData(data);\n      setLoading(false);\n      seterror(null);\n    } catch (error) {\n      seterror(error.message); // Setting error message as string\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this) // Displaying error message as string\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: class_name.map(item => Data['pred'][item] > 0.05 ? /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [item, \" : \", Data['pred'][item], \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 45\n        }, this) : \"\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mx-5\",\n        children: Data['data'].map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 my-5\",\n          children: /*#__PURE__*/_jsxDEV(SpotifyEmbed, {\n            trackURI: item['Track URI']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(Predictions, \"ISY05YKKGBCGD0M+U1nB4iB+zWI=\");\n_c = Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Predictions","props","_s","Data","setData","useState","Loading","setLoading","error","seterror","useEffect","imageData","data_fetch","response","fetch","mood","method","console","log","ok","Error","data","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","class_name","map","item","index","SpotifyEmbed","trackURI","_c","$RefreshReg$"],"sources":["D:/work_station/software project/react_website/emotion-music/src/components/Predictions.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function Predictions(props) {\r\n    const [Data, setData] = useState([]);\r\n    const [Loading, setLoading] = useState(true);\r\n    const [error, seterror] = useState(null);\r\n    useEffect(() => {\r\n        if (props.imageData) {\r\n            data_fetch();\r\n        }\r\n    }, [props.imageData]);\r\n\r\n    const data_fetch = async () => {\r\n        try {\r\n            const response = await fetch(`http://127.0.0.1:5000/reccomend/${props.mood}`, {\r\n                // mode: 'no-cors',\r\n                method: 'GET',\r\n            });\r\n            console.log(response);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setData(data);\r\n            setLoading(false);\r\n            seterror(null)  \r\n        } catch (error) {\r\n            seterror(error.message); // Setting error message as string\r\n            setLoading(false);\r\n        }\r\n    };\r\n  return (\r\n    <div>\r\n        {Loading ? (\r\n            <p>Loading...</p>\r\n        ) : error ? (\r\n            <p>Error: {error}</p> // Displaying error message as string\r\n        ) : (\r\n            <>\r\n            <div className=\"container\">\r\n                {class_name.map((item)=>(\r\n                    Data['pred'][item]>0.05?<h5>{item} : {Data['pred'][item]}%</h5>:\"\"\r\n                ))}\r\n            </div>\r\n            <div className=\"row mx-5\">\r\n                {Data['data'].map((item,index) => (\r\n                    <div className=\"col-md-4 my-5\" > \r\n                        <SpotifyEmbed trackURI={item['Track URI']} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}