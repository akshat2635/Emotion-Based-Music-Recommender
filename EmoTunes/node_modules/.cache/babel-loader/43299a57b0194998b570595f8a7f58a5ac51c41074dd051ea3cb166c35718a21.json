{"ast":null,"code":"var _jsxFileName = \"D:\\\\work_station\\\\software project\\\\react_website\\\\emotion-music\\\\src\\\\components\\\\Pred.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport SpotifyEmbed from './SpotifyEmbed';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Pred(props) {\n  _s();\n  const [Data, setData] = useState([]);\n  const [Loading, setLoading] = useState(true);\n  const [error, seterror] = useState(null);\n  useEffect(() => {\n    if (props.imageData) {\n      data_fetch();\n    }\n  }, [props.imageData]);\n  const data_fetch = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        // mode: 'no-cors',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: 'image=' + encodeURIComponent(props.imageData)\n      });\n      console.log(response);\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json();\n      setData(data);\n      setLoading(false);\n    } catch (error) {\n      seterror(error.message); // Setting error message as string\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this) // Displaying error message as string\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: Data['pred']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mx-5\",\n        children: Data['data'].map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 my-5\",\n          children: /*#__PURE__*/_jsxDEV(SpotifyEmbed, {\n            trackURI: item['Track URI']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Pred, \"ISY05YKKGBCGD0M+U1nB4iB+zWI=\");\n_c = Pred;\nvar _c;\n$RefreshReg$(_c, \"Pred\");","map":{"version":3,"names":["React","useEffect","useState","SpotifyEmbed","jsxDEV","_jsxDEV","Fragment","_Fragment","Pred","props","_s","Data","setData","Loading","setLoading","error","seterror","imageData","data_fetch","response","fetch","method","headers","body","encodeURIComponent","console","log","ok","Error","data","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","index","trackURI","_c","$RefreshReg$"],"sources":["D:/work_station/software project/react_website/emotion-music/src/components/Pred.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport SpotifyEmbed from './SpotifyEmbed';\r\n\r\nexport default function Pred(props) {\r\n    const [Data, setData] = useState([]);\r\n    const [Loading, setLoading] = useState(true);\r\n    const [error, seterror] = useState(null);\r\n    useEffect(() => {\r\n        if (props.imageData) {\r\n            data_fetch();\r\n        }\r\n    }, [props.imageData]);\r\n\r\n    const data_fetch = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/upload', {\r\n                // mode: 'no-cors',\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: 'image=' + encodeURIComponent(props.imageData)\r\n            });\r\n\r\n            console.log(response);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setData(data);\r\n            setLoading(false);  \r\n        } catch (error) {\r\n            seterror(error.message); // Setting error message as string\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {Loading ? (\r\n                <p>Loading...</p>\r\n            ) : error ? (\r\n                <p>Error: {error}</p> // Displaying error message as string\r\n            ) : (\r\n                <>\r\n                <div className=\"container\">\r\n                    {Data['pred']}\r\n                </div>\r\n                <div className=\"row mx-5\">\r\n                    {Data['data'].map((item,index) => (\r\n                        <div className=\"col-md-4 my-5\" > \r\n                            <SpotifyEmbed trackURI={item['Track URI']} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}