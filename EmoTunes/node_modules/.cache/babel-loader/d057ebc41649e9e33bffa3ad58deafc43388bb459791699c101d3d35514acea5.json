{"ast":null,"code":"var _jsxFileName = \"D:\\\\work_station\\\\software project\\\\react_website\\\\emotion-music\\\\src\\\\components\\\\Pred.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pred(props) {\n  _s();\n  const [Data, setData] = useState([]);\n  const [Loading, setLoading] = useState(true);\n  const [error, seterror] = useState(null);\n  useEffect(() => {\n    data_fetch();\n  });\n  const data_fetch = async () => {\n    try {\n      const response = await fetch('127.0.0.1:5000/upload', {\n        mode: 'no-cors',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: 'image=' + encodeURIComponent(props.imageData)\n      });\n      console.log(response);\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json();\n      setData(data['data']);\n      setLoading(false);\n    } catch (error) {\n      seterror(error.message); // Setting error message as string\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) // Displaying error message as string\n    : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item[\"Track URI\"]\n      }, item[\"Track URI\"], false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(Pred, \"ISY05YKKGBCGD0M+U1nB4iB+zWI=\");\n_c = Pred;\nvar _c;\n$RefreshReg$(_c, \"Pred\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Pred","props","_s","Data","setData","Loading","setLoading","error","seterror","data_fetch","response","fetch","mode","method","headers","body","encodeURIComponent","imageData","console","log","ok","Error","data","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["D:/work_station/software project/react_website/emotion-music/src/components/Pred.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Pred(props) {\r\n    const [Data, setData] = useState([]);\r\n    const [Loading, setLoading] = useState(true);\r\n    const [error, seterror] = useState(null);\r\n\r\n    useEffect(() => {\r\n        data_fetch();\r\n    });\r\n\r\n    const data_fetch = async () => {\r\n        try {\r\n            const response = await fetch('127.0.0.1:5000/upload', {\r\n                mode: 'no-cors',\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: 'image=' + encodeURIComponent(props.imageData)\r\n            });\r\n\r\n            console.log(response);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setData(data['data']);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            seterror(error.message); // Setting error message as string\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {Loading ? (\r\n                <p>Loading...</p>\r\n            ) : error ? (\r\n                <p>Error: {error}</p> // Displaying error message as string\r\n            ) : (\r\n                <ul>\r\n                    {Data.map((item) => (\r\n                        <li key={item[\"Track URI\"]}>{item[\"Track URI\"]}</li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZa,UAAU,CAAC,CAAC;EAChB,CAAC,CAAC;EAEF,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;QAClDC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAE,QAAQ,GAAGC,kBAAkB,CAACf,KAAK,CAACgB,SAAS;MACvD,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MACrB,IAAI,CAACA,QAAQ,CAACU,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACnD;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClCnB,OAAO,CAACkB,IAAI,CAAC,MAAM,CAAC,CAAC;MACrBhB,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAACiB,OAAO,CAAC,CAAC,CAAC;MACzBlB,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIP,OAAA;IAAA0B,QAAA,EACKpB,OAAO,gBACJN,OAAA;MAAA0B,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACjBtB,KAAK,gBACLR,OAAA;MAAA0B,QAAA,GAAG,SAAO,EAAClB,KAAK;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC;IAAA,eAEtB9B,OAAA;MAAA0B,QAAA,EACKtB,IAAI,CAAC2B,GAAG,CAAEC,IAAI,iBACXhC,OAAA;QAAA0B,QAAA,EAA6BM,IAAI,CAAC,WAAW;MAAC,GAArCA,IAAI,CAAC,WAAW,CAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyB,CACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EACP;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC3B,EAAA,CAjDuBF,IAAI;AAAAgC,EAAA,GAAJhC,IAAI;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}